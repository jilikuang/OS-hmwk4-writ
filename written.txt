1. (7.4)
FIFO: Average response time = 66
	Completion Time	Response Time
0	85		0		=---------------x
1	105		75		  |              -----x
2	135		100		   |                   ------x
3	90		70                              |             ---x
4	135		85                               |                ---------x

RR:   Average response time = 12
	Completion Time Response Time
0	220		0		=-  --    --    --      --     --  --  --  x
1	70		0		  =-    --    -x
2	120		15		   |  --    --    --      x
3	65		20		                |   --     -x
4	130		25		                 |    --     --  --  --  -x
Explanation: For the RR case, my result is assumably computed by the order of geting into the ready queue. For example, when task 1 starts to run, task 0 is inserted in the ready queue. Therefore, when task 2 arrives, it will be inserted after task 0. Furthermore, when requeue and new task arrive at the same time, new task is assumed to be added first and then requeue.

SJF:  Average response time = 5
	Completion Time Response Time
0	220		0		=-             -              -------------x
1	30		0		  =----x
2	60		25		   |    ------x
3	20		0		                =--x
4	50		0		                    =--------x

2. (7.13)
Assumption: B and C access different I/O -> Do not block each other

a) FIFO:
A finishes at time 100
B finishes at time 200
C finishes at time 202

Illustration:
A =-100
B      -- 8 * 10
C        -- 8 * 10

b) RR with 1ms
A finishes at time 140 (43 + 6 * 11 + 31)
B finishes at time 113
C finishes at time 117

Illustration:
A =  -  ------- -  - ------ -  - ----- - - - ---- - - - ---- - - - ---- - - - ---- - - - ---- - - - ---- - - - ------------------------------x
B  -  -        -  -        - -        - -        - -        - -        - -        - -        - -        - -       x
C   -  -         -  -         - -         - -        - -        - -        - -        - -        - -        - -       x

Explanation: The same queuing strategy is assumed the same as Q1

c) RR with 100ms
A finishes at time 100
B finishes at time

3. (7.16)


4. (7.17)


5. When a process forks a child, both parent and child processes are runnable. Assuming there are no other processes in the system and a single CPU system, explain how the Linux 3.4 default scheduler will schedule the parent and the child processes, including which process will run after the execution fork.


6. Explain how load balancing is done in the realtime scheduler in Linux 3.4.

